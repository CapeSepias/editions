plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.41'
}
repositories {
    jcenter()
    mavenCentral()
    //maven { url 'https://dl.bintray.com/guardian/kotlin' }
    mavenLocal()
}

kotlin {
    jvm("android")
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosX64("ios") {
        binaries {
            framework()
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation("io.ktor:ktor-client-core:1.2.3")
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.3.0-RC")
                api 'com.gu.kotlin:multiplatform-ophan:0.0.11'
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation("io.ktor:ktor-client-android:1.2.3")
            }
        }
        iosMain {
            dependencies {

            }
        }
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app.framework.dSYM'
        }
    }
}

configurations {
    compileClasspath
}